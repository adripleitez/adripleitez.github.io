{"version":3,"sources":["js/vigenere.js","js/jsonwebtoken.js","App.js","js/functions.js","index.js"],"names":["decipheredvigenere","msg","key","alf","ALF_SIZE","length","MSG_SIZE","KEY_SIZE","values_key","i","j","modNeg","n1","n2","mod","msg_descifrado","l","str","generateToken","json","privateKey","jwt","sign","data","expiresIn","verifyToken","token","verify","Dragger","Upload","initState","ciphed","txt","infoFile","myfile","infoGenerated","delimeter","flag","jwtRes","error","props","name","accept","multiple","action","App","changeHandler","e","setState","target","id","value","uploadingFile","content","status","file","reader","FileReader","onload","text","result","state","readAsText","originFileObj","message","success","convertTXTtoXML","xml","categories","readed","split","size","parseInt","forEach","param","k","trim","creditCardChiped","msg_ciph","ciphervigenere","push","final","flag2","convertTXTtoJSON","arr","JSON","stringify","then","localStorage","setItem","alert","submitHandler","filetodownload","preventDefault","newxml","replace","File","type","saveAs","decipheredHandler","deciphered","c","displayCifrado","jwtValidation","getItem","toString","respuesta","className","this","description","showIcon","closable","onChange","UploadOutlined","Form","maxLength","placeholder","toLowerCase","justify","gutter","onClick","fileinfo","parse","documento","apellido","tipo","telefono","slice","convertJSONToTxt","xmlDoc","DOMParser","parseFromString","getElementsByTagName","xml2text","childNodes","nodeValue","convertXMLToTxT","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.327e078d.chunk.js","sourcesContent":["export function ciphervigenere(msg, key) {\r\n    const alf = 'abcdefghijklmnopqrstuvwxyz0123456789';\r\n    const ALF_SIZE = alf.length;\r\n    const MSG_SIZE = msg.length;\r\n    const KEY_SIZE = key.length;\r\n\r\n    var values_key = [];\r\n    for (let i = 0; i < KEY_SIZE; i++) {\r\n        for (let j = 0; j < ALF_SIZE; j++) {\r\n            if (key[i] === alf[j]) {\r\n                values_key[i] = j;\r\n            }\r\n        }\r\n    }\r\n\r\n    var msg_ciph = [];\r\n    for (let i = 0; i < MSG_SIZE; i++) {\r\n        var l;\r\n        for (let j = 0; j < ALF_SIZE; j++) {\r\n            if (msg[i] === alf[j]) {\r\n                l = j;\r\n            }\r\n        }\r\n        msg_ciph[i] = alf[(values_key[i % KEY_SIZE] + l) % ALF_SIZE];\r\n    }\r\n    var str = \"\";\r\n    for (let i = 0; i < MSG_SIZE; i++) {\r\n        str += msg_ciph[i];\r\n    }\r\n    //console.log(str);\r\n    return str;\r\n}\r\n\r\nexport function decipheredvigenere(msg, key) {\r\n\r\n    const alf = 'abcdefghijklmnopqrstuvwxyz0123456789';\r\n    const ALF_SIZE = alf.length;\r\n    const MSG_SIZE = msg.length;\r\n    const KEY_SIZE = key.length;\r\n\r\n    // Guardar values de la key\r\n    var values_key = [];\r\n    for (let i = 0; i < KEY_SIZE; i++) {\r\n        for (let j = 0; j < ALF_SIZE; j++) {\r\n            if (key[i] === alf[j]) {\r\n                values_key[i] = j;\r\n            }\r\n        }\r\n    }\r\n\r\n    function modNeg(n1, n2) {\r\n        var mod = n1;\r\n        while (mod < 0) {\r\n            mod += n2;\r\n        }\r\n        return mod;\r\n    }\r\n\r\n    // Descifrar\r\n    var msg_descifrado = [];\r\n    for (let i = 0; i < MSG_SIZE; i++) {\r\n        var l;\r\n        for (let j = 0; j < ALF_SIZE; j++) {\r\n            if (msg[i] === alf[j]) {\r\n                l = j;\r\n            }\r\n        }\r\n        msg_descifrado[i] = alf[modNeg((l - values_key[i % KEY_SIZE]), ALF_SIZE)];\r\n    }\r\n\r\n    var str = \"\";\r\n    for (let i = 0; i < MSG_SIZE; i++) {\r\n        str += msg_descifrado[i];\r\n    }\r\n\r\n    return str + \"\\n\"; \r\n}","import jwt from 'jsonwebtoken'\r\n\r\nconst generateToken = async(json, privateKey)=>{\r\n    return jwt.sign({ data: json }, privateKey, { expiresIn: '2h' });\r\n}\r\n\r\nconst verifyToken = async(token, privateKey)=>{\r\n    try{ return jwt.verify(token, privateKey) }catch(err){ return err }\r\n}\r\n\r\nexport {generateToken, verifyToken}","import \"antd/dist/antd.css\";\r\nimport { Component } from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport { ciphervigenere, decipheredvigenere } from './js/vigenere';\r\nimport { convertJSONToTxt, convertXMLToTxT } from './js/functions';\r\nimport { generateToken, verifyToken } from './js/jsonwebtoken'\r\nimport { Alert, Button, Input, Upload, message, Row, Col } from 'antd';\r\nimport { UploadOutlined} from '@ant-design/icons';\r\nimport { saveAs } from \"file-saver\";\r\n\r\nconst { Dragger } = Upload;\r\nconst initState = {\r\n    key: \"\",\r\n    ciphed: [],\r\n    txt: \"\",\r\n    infoFile: \"\",\r\n    myfile: null,\r\n    infoGenerated: \"\",\r\n    jwt: {},\r\n    delimeter: \";\",\r\n    flag: false,\r\n    jwtRes: \"\",\r\n    error: \"ERROR\",\r\n}\r\n\r\nconst props = {\r\n    name: 'file',\r\n    accept: '.txt, .json, .xml',\r\n    multiple: false,\r\n    action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76'\r\n};\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({ ...initState })\r\n    }\r\n\r\n    changeHandler = e => {\r\n        this.setState({[e.target.id]: e.target.value})\r\n    }\r\n\r\n    uploadingFile = content => {\r\n        const { status } = content.file;\r\n\r\n        if (status === 'done') {\r\n            const reader = new FileReader()\r\n            reader.onload = async (content) => {\r\n                const text = (content.target.result)\r\n                this.state.infoFile = text\r\n            };\r\n            reader.readAsText(content.file.originFileObj)\r\n            message.success(`${content.file.name} archivo subido exitosamente.`);\r\n        } else if (status === 'error') {\r\n            message.error(`${content.file.name} error de subida.`);\r\n        }\r\n    }\r\n\r\n    convertTXTtoXML = (txt) => {\r\n        if(txt===\"\"){ this.setState({error:\"El archivo está vacío\", flag2:true}); return}\r\n\r\n        let xml = '    <cliente>\\n'\r\n        let i = 0;\r\n        let categories = [\"<documento>\", \"</documento>\", \"<primer-nombre>\", \"</primer-nombre>\", \"<apellido>\", \"</apellido>\", \"<credit-card>\", \"</credit-card>\", \"<tipo>\", \"</tipo>\", \"<telefono>\", \"</telefono>\"];\r\n        \r\n        //To read multiple objects\r\n        let readed = txt.split(this.state.delimeter);\r\n        let size = parseInt(readed.length / (categories.length/2));\r\n        if(size > 0){\r\n            for (let j = 0; j < size; j++) {\r\n                categories = [...categories, ...categories];\r\n            }\r\n        }\r\n        readed.forEach((param, k) => {\r\n            if (categories[i]  === \"<credit-card>\") {\r\n                //VIGENERE\r\n                if (this.state.key === \"\") xml += '        ' + categories[i] + param.trim() + categories[i + 1] + '\\n'\r\n                else {\r\n                    const creditCardChiped = ciphervigenere(param, this.state.key)\r\n                    this.state.ciphed.push(creditCardChiped)\r\n                    xml += '        ' + categories[i] + creditCardChiped + categories[i + 1] + '\\n'\r\n                }\r\n            } else if (k === (readed.length - 1)){\r\n                if (param.trim() !== '')\r\n                    xml += '        ' + categories[i] + param.trim() + categories[i + 1] + '\\n'\r\n            } else if ((k + 1) % 6 === 0){\r\n                xml += '        ' + categories[i] + param.trim() + categories[i + 1] + '\\n    </cliente>\\n    <cliente>\\n'\r\n            } else {\r\n                xml += '        ' + categories[i] + param.trim() + categories[i + 1] + '\\n'\r\n            }\r\n            i += 2\r\n        })\r\n        const final = '<clientes>\\n' + xml + '    </cliente>\\n</clientes>';\r\n        this.setState({\r\n            xml: final,\r\n            infoGenerated: final\r\n        })\r\n    }\r\n\r\n    convertTXTtoJSON = (txt) => {\r\n        if(txt===\"\"){ this.setState({error:\"El archivo está vacío\", flag2:true}); return}\r\n        let arr = [];\r\n        let json = {};\r\n        let categories = [\"documento\", \"primer-nombre\", \"apellido\", \"credit-card\", \"tipo\", \"telefono\"];\r\n        let readed = txt.split(this.state.delimeter);\r\n        let size = parseInt(readed.length / categories.length);\r\n        if(size > 0){\r\n            for (let j = 0; j < size; j++) {\r\n                categories = [...categories, ...categories];\r\n            }\r\n        }\r\n\r\n        readed.forEach((param, i) => {\r\n            if(categories[i] === 'documento')\r\n                json = {};\r\n\r\n            if (i === (readed.length - 1)){\r\n                if (param.trim() !== '')\r\n                    json[categories[i]] = param.trim();\r\n            }else{\r\n                json[categories[i]] = param.trim();\r\n            }\r\n\r\n            if(categories[i] === 'telefono' || (i === (readed.length - 1) && param.trim() !== ''))\r\n                arr.push(json);\r\n        })\r\n        this.setState({ json: arr, infoGenerated: JSON.stringify(arr) })\r\n\r\n        if (this.state.key !== \"\") {\r\n            generateToken(json, this.state.key).then(jwt => {\r\n                localStorage.setItem('jwtSesion', jwt);\r\n                this.setState({ jwt })\r\n            })\r\n        } else { this.setState({ alert: true }) }\r\n    }\r\n\r\n    submitHandler = (e, target) => {\r\n        e.preventDefault()\r\n        var filetodownload;\r\n        if (target === \"descargarXml\") {\r\n            var newxml = this.state.xml\r\n            for(let i=0; i < this.state.ciphed.length ; i++ ){\r\n                newxml = newxml.replace(this.state.ciphed[i], decipheredvigenere(this.state.ciphed[i],this.state.key).trim())\r\n            }\r\n\r\n            filetodownload = new File([newxml], \"xml-file-downloaded.xml\", { type: \"application/xml\" });\r\n        } else if (target === \"descargarJson\") {\r\n            filetodownload = new File([JSON.stringify(this.state.json)], \"json-file-downloaded.json\", { type: \"application/json\" });\r\n        }\r\n        saveAs(filetodownload);\r\n    }\r\n\r\n    decipheredHandler = e => {\r\n        e.preventDefault()\r\n        const deciphered = []\r\n\r\n        this.state.ciphed.forEach((c) => {\r\n            deciphered.push(decipheredvigenere(c,this.state.key))\r\n        })\r\n\r\n        this.setState({\r\n            displayCifrado: deciphered\r\n        })\r\n    }\r\n\r\n    jwtValidation = e => {\r\n        e.preventDefault()\r\n        if (localStorage.getItem(\"jwtSesion\")) {\r\n            this.setState({ jwt: localStorage.getItem(\"jwtSesion\") })\r\n        }\r\n        verifyToken(this.state.jwt.toString(), this.state.key).then((respuesta) => {\r\n            if (respuesta.json != null) {\r\n                this.setState({\r\n                    jwtRes: respuesta.json,\r\n                    flag: true\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    flag2: true\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"App\">\r\n                {this.state.flag && <Alert\r\n                    message=\"Jason web token validado exitosamente\"\r\n                    description={JSON.stringify(this.state.jwtRes)}\r\n                    type=\"success\"\r\n                    showIcon\r\n                    closable\r\n                />}\r\n                {this.state.flag2 && <Alert\r\n                    message=\"Ha ocurrido un error\"\r\n                    description={this.state.error}\r\n                    type=\"error\"\r\n                    showIcon\r\n                    closable\r\n                />}\r\n                <header className=\"App-header\">\r\n                    <Dragger {...props} onChange={(content) => this.uploadingFile(content)} >\r\n                        <p className=\"ant-upload-drag-icon\">\r\n                            <UploadOutlined />\r\n                        </p>\r\n                        <p className=\"ant-upload-text\">Haz click aquí para depositar tu archivo</p>\r\n                        <p className=\"ant-upload-hint\">Solo se permiten archivos .txt .xml o .json</p>\r\n                    </Dragger>\r\n                    <Form className=\"form\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col\">\r\n                                <p className=\"p-text\">Delimitador:</p>\r\n                                <Input maxLength={1} id=\"delimeter\" placeholder=\"delimeter\" onChange={this.changeHandler} value={this.state.delimeter} />\r\n                            </div>\r\n                            <div className=\"col\">\r\n                                <p className=\"p-text\">Llave de cifrado:</p>\r\n                                <Input id=\"key\" placeholder=\"llave de cifrado\" onChange={this.changeHandler} value={this.state.key.toLowerCase()} />\r\n                            </div>\r\n                        </div>\r\n                        <Row justify=\"center\" gutter={30}>\r\n                            <Col className=\"gutter-row\">\r\n                                <Button type=\"primary\" className=\"btn\" id=\"generateXml\" onClick={() => this.convertTXTtoXML(this.state.infoFile)} >General XML</Button>\r\n                            </Col>\r\n                            <Col className=\"gutter-row\">\r\n                                <Button type=\"primary\" className=\"btn\" id=\"descargarXml\" onClick={(e) => this.submitHandler(e, \"descargarXml\")} >Descargar XML </Button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row justify=\"center\" gutter={30}>\r\n                            <Col className=\"gutter-row\">\r\n                                <Button type=\"primary\" className=\"btn\" id=\"generateJson\" onClick={() => this.convertTXTtoJSON(this.state.infoFile)}>Generar JSON</Button>\r\n                            </Col>\r\n                            <Col className=\"gutter-row\">\r\n                                <Button type=\"primary\" className=\"btn\" id=\"descargarJson\" onClick={(e) => this.submitHandler(e, \"descargarJson\")} >Descargar JSON</Button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row justify=\"center\" gutter={30}>\r\n                            <Col className=\"gutter-row\">\r\n                                <Button type=\"primary\" className=\"btn\" onClick={() => convertJSONToTxt(this.state.infoFile, this.state.delimeter)}>Convertir JSON A TXT</Button>\r\n                            </Col>\r\n                            <Col className=\"gutter-row\">\r\n                                <Button type=\"primary\" className=\"btn\" onClick={() => convertXMLToTxT(this.state.infoFile, this.state.delimeter)}>Convertir XML A TXT</Button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row justify=\"center\" gutter={30}>\r\n                            <Col className=\"gutter-row\">\r\n                                <Button type=\"primary\" className=\"btn btn-ciphed\" onClick={this.decipheredHandler} >Decodificar Cifrado</Button>\r\n                            </Col>\r\n                            <Col className=\"gutter-row\">\r\n                                <Button type=\"primary\" className=\"btn\" onClick={this.jwtValidation} >Guardar JSON con JWT</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </header>\r\n                <div className=\"App-body\">\r\n                    <div className=\"container\">\r\n                        <h3>Contenido archivo de origen:</h3><br />\r\n                        <div className=\"container-label\"><label type=\"text\">{this.state.infoFile}</label><br/></div>\r\n                    </div>\r\n                    <div className=\"container\">\r\n                        <h3>Contenido archivo generado:</h3><br />\r\n                        <div className=\"container-label\"><label type=\"text\">{this.state.infoGenerated}</label><br/></div>\r\n                    </div>\r\n                    <div className=\"container\">\r\n                        <h3>Ver contenido cifrado:</h3><br />\r\n                        <div className=\"container-label\"><label type=\"text\">{this.state.displayCifrado}</label><br/></div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default App;\r\n","import { saveAs } from \"file-saver\";\r\nimport {message} from 'antd';\r\n\r\nconst convertJSONToTxt = (fileinfo, delimeter) => {\r\n    let json = {};\r\n    try {\r\n        json = JSON.parse(fileinfo);\r\n    } catch (error) {\r\n        message.error(\"El texto leido no es un JSON\");\r\n        return;\r\n    }\r\n    var str = \"\"\r\n    for (let key in json) {\r\n        str += json[key].documento + delimeter\r\n            + json[key]['primer-nombre'] + delimeter\r\n            + json[key].apellido + delimeter\r\n            + json[key]['credit-card'] + delimeter\r\n            + json[key].tipo + delimeter\r\n            + json[key].telefono + delimeter\r\n    }\r\n    const txt = str.slice(0, - 1)\r\n    var file = new File([txt], \"json-converted.txt\", { type: \"text/plain\" });\r\n    saveAs(file);\r\n}\r\n\r\nconst convertXMLToTxT = (xml, delimeter) => {\r\n    var parser, xmlDoc;\r\n\r\n    parser = new DOMParser();\r\n    xmlDoc = parser.parseFromString(xml, \"text/xml\");\r\n\r\n    let size = xmlDoc.getElementsByTagName(\"cliente\").length;\r\n    let xml2text = '';\r\n    for (let i = 0; i < size; i++) {\r\n        xml2text += xmlDoc.getElementsByTagName(\"documento\")[i].childNodes[0].nodeValue + delimeter +\r\n            xmlDoc.getElementsByTagName(\"primer-nombre\")[i].childNodes[0].nodeValue + delimeter +\r\n            xmlDoc.getElementsByTagName(\"apellido\")[i].childNodes[0].nodeValue + delimeter +\r\n            xmlDoc.getElementsByTagName(\"credit-card\")[i].childNodes[0].nodeValue + delimeter +\r\n            xmlDoc.getElementsByTagName(\"tipo\")[i].childNodes[0].nodeValue + delimeter +\r\n            xmlDoc.getElementsByTagName(\"telefono\")[i].childNodes[0].nodeValue;\r\n        if(i !== (size - 1)){\r\n            xml2text += `${delimeter}\\n`;\r\n        }\r\n    }\r\n\r\n    var file = new File([xml2text], \"xml-converted.txt\", { type: \"text/plain\" });\r\n    saveAs(file);\r\n}\r\n\r\nexport { convertJSONToTxt, convertXMLToTxT }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));\r\n"],"sourceRoot":""}